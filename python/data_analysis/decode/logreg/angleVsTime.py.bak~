from std_lib import * 
sys.path.insert(1, '/homecentral/alexandre.mahrach/gdrive/postdoc_IDIBAPS/python/data_analysis') 
from sklearn_lib import * 

import data.constants as gv
importlib.reload(gv) ;

import data.utils as data
importlib.reload(data) ;

import utils as fct
importlib.reload(fct) ;

import data.fct_facilities as fac
importlib.reload(fac) ;
fac.SetPlotParams()

IF_SHUFFLE = 0

for gv.mouse in gv.mice: 

    data.get_sessions_mouse()
    data.get_stimuli_times()
    data.get_delays_times() 
    
    for gv.session in [gv.sessions[-1]] : 
    
        X_data, y_labels = data.get_fluo_data() 
        print('mouse', gv.mouse, 'session', gv.session, 'data X', X_data.shape,'y', y_labels.shape) 

        data.get_bins(t_start=0) 

        cos_alp_trials = [] 
        alpha_trials = [] 

        for gv.trial in gv.trials : 
            X_S1_trials, X_S2_trials = data.get_S1_S2_trials(X_data, y_labels) 
            print(X_S1_trials.shape) 

            # if('all' in gv.epochs):
            #     gv.n_bin = 2*gv.frame_rate 
            #     X_trials, y_trials = data.get_X_y_trials(X_data[:,:,gv.bins_baseline[-1]+1:], y_labels) 
            #     X_trials = np.rollaxis(X_trials,2,0) 
            # else:
            X_trials, y_trials = data.get_X_y_epochs(X_S1_trials, X_S2_trials) 

            print('X', X_trials.shape,'y', y_trials.shape) 
            
            coefs = fct.log_reg_cv(X_trials, y_trials) 
            # coefs = fct.cross_val_clf(X_trials, y_trials) 
            # coefs = fct.grid_search_cv_clf(X_trials, y_trials) 
            # print(coefs.shape) 
            
            alpha, cos_alp = fct.get_cos(coefs) 
            print('trial', gv.trial, 'cos_alp', cos_alp) 
            
            alpha_trials.append(alpha) 
            cos_alp_trials.append(cos_alp) 
            
            figtitle = '%s_%s_cos_alpha_trials' % (gv.mouse, gv.session) 
            ax = plt.figure(figtitle).add_subplot() 
            xticks = np.arange(0,len(gv.epochs)-1) 
            width = 0.2 
            
            if('ND' in gv.trial):
                # plt.plot( cos_alp,'o', label=gv.trial, ms=5)
                ax.bar(xticks-3/10, cos_alp[1:], width, label=gv.trial) ; 
            if('D1' in gv.trial):
                # plt.plot( cos_alp,'d', label=gv.trial, ms=5)
                ax.bar(xticks-1/10, cos_alp[1:], width, label=gv.trial) ; 
            if('D2' in gv.trial):
                # plt.plot( cos_alp,'*', label=gv.trial, ms=5)
                ax.bar(xticks+1/10, cos_alp[1:], width, label=gv.trial) ; 

            plt.ylabel('cos($\\alpha$)') 
            if('all' in gv.epochs):
                plt.xlabel('time(s)')
            else:
                plt.xlabel('trials')            
                labels = gv.epochs ; 
                ax.set_xticks(xticks) ; 
                ax.set_xticklabels(labels[1:]) ; 
                
            ax.legend()

        if IF_SHUFFLE: 
            mat_alp = [] 
            mat_cos = [] 
        
            X_S1_all, X_S2_all = data.get_S1_S2_all(X_data, y_labels) 
            if('all' in gv.epochs): 
                gv.n_bin = 2*gv.frame_rate 
                X_all, y_all = data.get_X_y_trials(X_data[:,:,gv.bins_baseline[-1]+1:], y_labels) 
                X_all = np.rollaxis(X_all,2,0) 
            else: 
                X_all, y_all = data.get_X_y_epochs(X_S1_all, X_S2_all) 
                
            for i in range(100): 
                coefs_shuffle = fct.cross_val_clf(X_all, y_all, shuffle=1) 
                alpha_shuffle, cos_alp_shuffle = fct.get_cos(coefs_shuffle) 

                mat_alp.append(alpha_shuffle) 
                mat_cos.append(cos_alp_shuffle) 

            mat_cos = np.asarray(mat_cos) 
                    
            mean_cos = np.mean(mat_cos, axis=0) 
            std_cos =  np.std(mat_cos, axis=0) 
            print('<cos(alp)>', mean_cos, 'std_cos', std_cos) 

            figtitle = '%s_%s_cos_alpha_trials' % (gv.mouse, gv.session) 
            ax = plt.figure(figtitle).add_subplot() 
            ax.bar(xticks+3/10, mean_cos[1:], width, label='shuffle',yerr=std_cos[1:]) ; 
            ax.legend()

        
        # if gv.IF_SAVE:
        #     if gv.correct:
        #         plt.savefig('../figs/correct_trials/'+figname+'.svg',format='svg')
        #     else:
        #         plt.savefig('../figs/'+ figtitle + '.svg', format='svg') 

        # z_score_alp = fct.get_z_score_cos_alp(cos_alp_trials, mean_cos, std_cos) 
        # p_value_alp = fct.get_p_value_alp(z_score_alp) 
