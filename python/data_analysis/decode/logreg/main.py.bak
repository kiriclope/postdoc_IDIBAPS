from std_lib import *
from sklearn_lib import *
sys.path.insert(1, '/homecentral/alexandre.mahrach/gdrive/postdoc_IDIBAPS/python/data_analysis')

import data.constants as gv
importlib.reload(gv) ;

import data.utils as data
importlib.reload(data) ;

import utils as fct
importlib.reload(fct) ;

import data.fct_facilities as fac
importlib.reload(fac) ;
fac.SetPlotParams()

for gv.mouse in [gv.mice[-1]]:
    print('mouse:', gv.mouse)

    data.get_sessions_mouse()
    data.get_stimuli_times()
    data.get_delays_times() 

    print('t_early_delay', gv.t_early_delay) 
    print('t_late_delay', gv.t_late_delay) 
    
    for gv.session in [gv.sessions[-1]] : 
    
        X_data, y_labels = data.get_fluo_data() 
        print('session:', gv.session, 'X', X_data.shape,'y', y_labels.shape) 

        data.get_bins(t_start=1.5) 
    
        alpha, cos_alp = fct.get_cos_trials(X_data,y_labels) 
        print('cos_alp', cos_alp) 

        mat_alp = [] 
        mat_cos = [] 
        for i in range(100): 
            alpha_shuffle, cos_alp_shuffle = fct.get_cos_trials(X_data, y_labels, shuffle=1, all_trials=1) 
            mat_alp.append(alpha_shuffle) 
            mat_cos.append(cos_alp_shuffle) 

        mat_alp = np.asarray(mat_alp) 
            
        mean_alp = np.mean(mat_alp, axis=0) 
        std_alp = np.std(mat_alp, axis=0) 
        print('cos(<alp>)', np.cos(mean_alp), 'std_alp', std_alp) 

        mat_cos = np.asarray(mat_cos) 
        # print(mat_cos.shape) 

    fct.plot_cos_bar(cos_alp, [0,0,0])
    gv.dum=1
    
    mean_cos = np.mean(mat_cos, axis=0) 
    std_cos = np.std(mat_cos, axis=0) 
    print('<cos(alp)>',mean_cos, 'std_cos', std_cos) 

    if(len(mean_cos)==1):
        fct.plot_cos_bar([mean_cos[0], mean_cos[0], mean_cos[0]], [std_cos[0], std_cos[0], std_cos[0]]) 
    else: 
        fct.plot_cos_bar(mean_cos, std_cos) 

    gv.dum=-1 

    figname = 'cos(alpha) %s' % gv.mouse
    plt.figure(figname)
    plt.savefig(figname,format='svg')
    
    z_score_alp = fct.get_z_score_cos_alp(cos_alp, mean_cos, std_cos) 

    figname = 'z_score cos(alpha) %s' % gv.mouse 
    plt.figure(figname) 
    plt.savefig(figname,format='svg') 

    p_value_alp = fct.get_p_value_alp(z_score_alp) 

    figname = 'p_value cos(alpha) %s' % gv.mouse 
    plt.figure(figname)
    plt.savefig(figname,format='svg')

