from std_lib import *
sys.path.insert(1, '/homecentral/alexandre.mahrach/gdrive/postdoc_IDIBAPS/python/data_analysis')

import data.constants as gv
importlib.reload(gv) ;

import data.utils as data
importlib.reload(data) ;

from sklearn_lib import *
from mne_lib import *

import utils as decode 
importlib.reload(decode) ; 

import data.fct_facilities as fac
importlib.reload(fac) ;
fac.SetPlotParams()

for gv.mouse in gv.mice : 

    data.get_sessions_mouse()
    data.get_stimuli_times()
    data.get_delays_times() 

    for gv.session in [gv.sessions[-1]] : 
        X_data, y_labels = data.get_fluo_data() 
        print('mouse', gv.mouse, 'session', gv.session, 'data X', X_data.shape,'y', y_labels.shape) 
        
        data.get_delays_times() 
        data.get_frame_rate() 
        data.get_bins(t_start=0) 
        
        gv.duration = X_data.shape[2]/gv.frame_rate 
        time = np.linspace(0, gv.duration, X_data.shape[2]) ; 
        
        X_S1_all, X_S2_all = data.get_S1_S2_all(X_data, y_labels) 
        X_all, y_all = data.get_X_y_epochs(X_S1_all, X_S2_all) 
        
        print('# trials, # neurons, # epochs') 
        print(X_all.shape) 
        print(y_all.shape) 

        # X_all = np.rollaxis(X_all,2,1).transpose() 
        # print('# trials, # neurons x # epochs') 
        # print(X_all.shape) 
        # print(y_all.shape) 

        X_window  = np.reshape((X_all), (X_all.shape[0], X_all.shape[1]* X_all.shape[2]))
        print('# trials, # neurons x # epoch') 
        print(X_window.shape) 
        print(y_all.shape) 
       
        search = decode.grid_search_cv_clf(X_window, y_all, cv=10) 

        clf = search.best_estimator_
        
        print('overall score', clf.score(X_window, y_all))

        for gv.trial in gv.trials : 
            X_S1_trials, X_S2_trials = data.get_S1_S2_trials(X_data, y_labels) 
            X_trials, y_trials = data.get_X_y_epochs(X_S1_trials, X_S2_trials) 
            
            print('trial:', gv.trial, 'X', X_trials.shape,'y', y_trials.shape) 
            
            scores, scores_std = decode.mne_cross_temp_clf(X_trials, y_trials, clf, cv=10) 
            
            decode.cross_temp_plot_mat(scores, IF_EPOCHS=0) 
            
            # figname = '%s_session_%s_trial_%s_cross_temp_decoder' % (gv.mouse,gv.session,gv.trial) 
            # plt.figure(figname)

            # if gv.correct:
            #     plt.savefig('../figs/correct_trials/'+figname+'.svg',format='svg')
            # else:
            #     plt.savefig('../figs/'+figname+'.svg',format='svg')
