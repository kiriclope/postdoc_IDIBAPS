from libs import * 

sys.path.insert(1, '/homecentral/alexandre.mahrach/gdrive/postdoc_IDIBAPS/python/data_analysis') 

import data.constants as gv 
importlib.reload(gv) ; 

import data.utils as data 
importlib.reload(data) ; 

import data.fct_facilities as fac
importlib.reload(fac) ; 
fac.SetPlotParams() 

import preprocessing as prep
from plotting import * 

pal = ['r','b','y']
gv.samples = ['S1', 'S2']

n_components = 3 
gv.laser_on = 0

for gv.mouse in [gv.mice[1]] : 

    data.get_sessions_mouse() 
    data.get_stimuli_times() 
    data.get_delays_times()
    
    for gv.session in [gv.sessions[-1]] : 
        X, y = data.get_fluo_data()
        print('mouse', gv.mouse, 'session', gv.session, 'data X', X.shape,'y', y.shape) 
        # print('y_laser', y[8])
        data.get_delays_times() 
        data.get_frame_rate() 
        data.get_bins(t_start=0) 
        
        F0 = np.mean(X[:,:,gv.bins_baseline],axis=2) 
        F0 = F0[:,:, np.newaxis] 
        
        idx = np.where(F0==0)[1] 
        F0 = np.delete(F0, idx, axis=1) 
        X = np.delete(X, idx, axis=1) 
        
        X = (X -F0) / (F0 + 0.0000001) 
        
        trials = [] 
        trials_avg = [] 
        for gv.trial in gv.trials: 
            X_S1, X_S2 = data.get_S1_S2_trials(X, y) 
            data.get_trial_types(X_S1)

            X_S1_S2 = np.vstack((X_S1, X_S2)) 
            print('X_S1', X_S1.shape, 'X_S2', X_S2.shape)
            if 'all' in gv.samples: 
                # concatenate S1 and S2 trials
                X_S1_S2_avg = np.mean(X_S1_S2, axis=0) 
            else: 
                # keep S1 and S2 trials separated                
                X_S1_avg = np.mean(X_S1, axis=0) 
                X_S2_avg = np.mean(X_S2, axis=0) 
                X_S1_S2_avg = np.hstack((X_S1_avg, X_S2_avg)) 
                        
            print('X_S1_S2', X_S1_S2.shape) 
            print('X_S1_S2_avg', X_S1_S2_avg.shape) 

            trials.append(X_S1_S2)
            trials_avg.append(X_S1_S2_avg)
        
        X_trials = np.vstack(trials)
        print('X_trials', X_trials.shape)
        
        X_avg = np.hstack(trials_avg) 
        scaler = StandardScaler(with_mean=True, with_std=True)
        X_avg = scaler.fit_transform(X_avg.T).T
        print('X_avg', X_avg.shape)
        
        pca = PCA(n_components=n_components) 
        pca.fit_transform(X_avg.T) 
        explained_variance = pca.explained_variance_ratio_ 
        print('explained_variance', explained_variance, 'total' ,np.cumsum(explained_variance)[-1]) 

        projected_trials = []
        for i in range(X_trials.shape[0]):
            # scale every trial using the same scaling applied to the averages 
            trial = scaler.transform(X_trials[i,:,:].T).T 
            # project every trial using the pca fit on averages
            proj_trial = pca.transform(trial.T).T
            projected_trials.append(proj_trial)
        
        X_proj = np.asarray(projected_trials) 
        X_proj = np.reshape(X_proj, (len(gv.trials), len(gv.samples), int(gv.n_trials/len(gv.samples)), n_components, gv.trial_size)) 
        
        print(X_proj.shape) 
        f, axes = plt.subplots(1, 3, figsize=[10, 2.8], sharey=True, sharex=True) 
        x = gv.time
        for n_pc in range(3):
            ax = axes[n_pc] 
            for i, trial in enumerate(gv.trials):
                for j, sample in enumerate(gv.samples): 
                    dum = X_proj[i,j,:,n_pc,:].transpose()
                    y = np.mean( dum, axis=1) 
                    
                    ax.plot(x, y, color=pal[i]) 
                    ci = prep.conf_inter(dum) 
                    ax.fill_between(x, ci[0], ci[1] , color=pal[i], alpha=.1)
                    
                add_stim_to_plot(ax) 
                ax.set_xlim([0, gv.t_test[1]+1])
                    
            ax.set_ylabel('PC {}'.format(n_pc+1)) 
            axes[1].set_xlabel('Time (s)') 
            sns.despine(right=True, top=True) 
            add_orientation_legend(axes[2]) 
